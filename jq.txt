■sample.json
{
  "companyName" : "MyCompany,inc",
  "contact": {
    "phone" : "00-0000-0000",
    "email" : "foo@example.com",
    "address" : "xxx xxxx xxxx 3F"
  },
  "employees" : [
    {
      "id":1,
      "name": "Alice",
      "address": "aaa aaa aaa"
    },
    {
      "id":2,
      "name": "Bob",
      "address": "bbb bbb bbb"
    },
    {
      "id":3,
      "name": "Carol",
      "address": "ccc ccc ccc"
    }
  ]
}


■特定の項目のみで配列を再定義
　cat sample.json | jq -r ['.employees[] | {id,name}']
　
　[
　  {
　    "id": 1,
　    "name": "Alice"
　  },
　  {
　    "id": 2,
　    "name": "Bob"
　  },
　  {
　    "id": 3,
　    "name": "Carol"
　  }
　]
　
■文字列のダブルクォートを除く
　cat sample.json | jq -r '.employees[].name'
　
　Alice
　Bob
　Carol
　
■重複を除外
　unique
　
　
■gronコマンド
　コマンドラインでJSONを操作する時はjqコマンドを使うことが多いと思うが、
　フルパスで指定が必要のためJSON構造が変わってしまったりした場合にスクリプトの修正が必要になったり
　単純に階層が深いデータを取得したりする場合に面倒だったりする。
　このような時、gronというコマンドを使えば行単位でJSONデータを分解してくれるので
　grepと組み合わせて使えばjqを使うよりも便利な場合がある。
　
https://github.com/tomnomnom/gron

上記より最新のコマンドを取得する(2023/12現在の最新バージョンは0.7.1)
tar xvf gron-linux-amd64-0.7.1.tgz
sudo mv gron /usr/local/bin
　
$ cat sample.json | gron
json = {};
json.companyName = "MyCompany,inc";
json.contact = {};
json.contact.address = "xxx xxxx xxxx 3F";
json.contact.email = "foo@example.com";
json.contact.phone = "00-0000-0000";
json.employees = [];
json.employees[0] = {};
json.employees[0].address = "aaa aaa aaa";
json.employees[0].id = 1;
json.employees[0].name = "Alice";
json.employees[1] = {};
json.employees[1].address = "bbb bbb bbb";
json.employees[1].id = 2;
json.employees[1].name = "Bob";
json.employees[2] = {};
json.employees[2].address = "ccc ccc ccc";
json.employees[2].id = 3;
json.employees[2].name = "Carol";

$ cat sample.json | gron | grep  name
json.employees[0].name = "Alice";
json.employees[1].name = "Bob";
json.employees[2].name = "Carol";


$ cat sample.json | gron | grep name | gron --ungron
{
  "employees": [
    {
      "name": "Alice"
    },
    {
      "name": "Bob"
    },
    {
      "name": "Carol"
    }
  ]
}